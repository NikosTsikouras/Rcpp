// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pairing_algorithm
std::unordered_map<std::string,std::string> pairing_algorithm(std::vector<std::string> keys1, std::vector<std::vector<std::string>> values1, std::vector<std::string> keys2, std::vector<std::vector<std::string>> values2);
RcppExport SEXP _StableMarriage2_pairing_algorithm(SEXP keys1SEXP, SEXP values1SEXP, SEXP keys2SEXP, SEXP values2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type keys1(keys1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type values1(values1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type keys2(keys2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type values2(values2SEXP);
    rcpp_result_gen = Rcpp::wrap(pairing_algorithm(keys1, values1, keys2, values2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StableMarriage2_pairing_algorithm", (DL_FUNC) &_StableMarriage2_pairing_algorithm, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_StableMarriage2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
